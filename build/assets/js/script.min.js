function iteriaWatermark(){console.log("            hMMMMMMMy       :MMMMMMMM`            "),console.log("            hMM                   yMM`            "),console.log("            hMM      /oooooo`     yMM`            "),console.log("            hMM      sdddddd`     yMM`            "),console.log("            hMM      sdddddd`     yMM`            "),console.log("            hMM      /oooooo`     yMM`            "),console.log("            hMM                   yMM`            "),console.log("            hMMMMMMMy       :MMMMMMMM`            "),console.log("                                                  "),console.log(".` .::::::::` -oooooo.  ooo++:    :.      /.      "),console.log("/-     :-     /+        m   `/m`  s:     /hd`     "),console.log("/-     :-     /+        m    `m-  s:    -d`:h     "),console.log("/-     :-     /hoooo+   N+++yo-   s:   `m:``ys    "),console.log("/-     :-     /+        m   oy`   s:   do++++h/   "),console.log("/-     :-     /o        m    :d.  s:  yo     `m-  "),console.log(".`     ``     .//////`  :     .:  -` `/       .: ")}$(function(){var e,l=$(window).innerWidth();function n(){991<l?$(".team").height($(".team__carousel_detail").height()+10):$(".team").removeAttr("style")}n(),$(".btn_burger").on("click",function(o){o.preventDefault(),$(this).toggleClass("clicked"),$(".header__main-nav, .header__languages, .mob-register-btn").toggleClass("uncollapsed")}),$("#doctors-filter").on("change",function(){var o=$(this).val();console.log(o),$(".team__carousel_photo").slick("slickFilter",".team__carousel_photo__slide"),$(".team__carousel_photo").slick("slickFilter",'.team__carousel_photo__slide[data-cat="'+o+'"]')}),$(window).on("resize",function(o){clearTimeout(e),e=setTimeout(function(){991<(l=$(window).innerWidth())&&($(".header__main-nav, .header__languages, .mob-register-btn").removeClass("uncollapsed"),$(".btn_burger").removeClass("clicked")),n()},250)})}),AOS.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJpdGVyaWFXYXRlcm1hcmsiLCJjb25zb2xlIiwibG9nIiwiJCIsInJlc2l6ZURvbmVUaW1lciIsIndpbmRvd1dpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsInRlYW1Sb3dIZWlnaHQiLCJoZWlnaHQiLCJyZW1vdmVBdHRyIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ0aGlzIiwidG9nZ2xlQ2xhc3MiLCJ2YWwiLCJzbGljayIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmVDbGFzcyIsIkFPUyIsImluaXQiXSwibWFwcGluZ3MiOiJBQXlEQSxTQUFTQSxrQkFDUEMsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxzREFDWkQsUUFBUUMsSUFBSSxxREF6RWRDLEVBQUUsV0FDQSxJQUFJQyxFQUNBQyxFQUFjRixFQUFFRyxRQUFRQyxhQWU1QixTQUFTQyxJQUNVLElBQWRILEVBQ0RGLEVBQUUsU0FBU00sT0FBT04sRUFBRSwwQkFBMEJNLFNBQVcsSUFFekROLEVBQUUsU0FBU08sV0FBVyxTQUsxQkYsSUFFQUwsRUFBRSxlQUFlUSxHQUFHLFFBQVMsU0FBU0MsR0FDcENBLEVBQUVDLGlCQUNGVixFQUFFVyxNQUFNQyxZQUFZLFdBQ3BCWixFQUFFLDREQUE0RFksWUFBWSxpQkFHNUVaLEVBQUUsbUJBQW1CUSxHQUFHLFNBQVUsV0FDaEMsSUFBSUssRUFBTWIsRUFBRVcsTUFBTUUsTUFDbEJmLFFBQVFDLElBQUljLEdBQ1piLEVBQUUseUJBQXlCYyxNQUFNLGNBQWUsZ0NBQ2hEZCxFQUFFLHlCQUF5QmMsTUFBTSxjQUFlLDBDQUEwQ0QsRUFBSSxRQUdoR2IsRUFBRUcsUUFBUUssR0FBRyxTQUFVLFNBQVNDLEdBQzlCTSxhQUFhZCxHQUNiQSxFQUFrQmUsV0FBVyxXQUlWLEtBRmpCZCxFQUFjRixFQUFFRyxRQUFRQyxnQkFHdEJKLEVBQUUsNERBQTREaUIsWUFBWSxlQUMxRWpCLEVBQUUsZUFBZWlCLFlBQVksWUFHL0JaLEtBQ0MsU0EwQlBhLElBQUlDIiwiZmlsZSI6InNjcmlwdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKGZ1bmN0aW9uKCkge1xyXG4gIHZhciByZXNpemVEb25lVGltZXI7XHJcbiAgdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLmlubmVyV2lkdGgoKTtcclxuICB2YXIgZG9jRGVzY3IgPSBbXTtcclxuXHJcbiAgLy8gZnVuY3Rpb24gcHV0TG9nb0l0ZW1Ub05hdigpIHtcclxuICAvLyAgIHZhciBsb2dvSXRlbSA9ICc8bGkgc3R5bGU9XCJtYXgtd2lkdGg6IDA7IG9wYWNpdHk6IDA7IHRvcDogMDtcIiBjbGFzcz1cImxvZ28taXRlbSBkLW5vbmUgZC1sZy1pbmxpbmUtYmxvY2tcIj48YSBocmVmPVwiaHR0cHM6Ly8nK3dpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSsnL1wiPjxpbWcgc3JjPVwiYXNzZXRzL2ltZy9sb2dvLnBuZ1wiIGFsdD1cImxvZ29cIj48L2E+PC9saT4nO1xyXG4gIC8vICAgdmFyIGluc2VydEFmdGVyT2JqID0gJCgnLmhlYWRlcl9fbWFpbi1uYXYgdWwgbGknKS5lcSgkKCcuaGVhZGVyX19tYWluLW5hdiB1bCBsaScpLmxlbmd0aCAvIDIgLSAxKTtcclxuICAvLyAgICQobG9nb0l0ZW0pLmluc2VydEFmdGVyKGluc2VydEFmdGVyT2JqKTtcclxuICAvLyAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gIC8vICAgICAkKCcuaGVhZGVyX19tYWluLW5hdiB1bCAubG9nby1pdGVtJykuY3NzKHtcclxuICAvLyAgICAgICAnbWF4LXdpZHRoJzogJzEwMHZ3JyxcclxuICAvLyAgICAgICAnb3BhY2l0eSc6ICcxJ1xyXG4gIC8vICAgICB9KTtcclxuICAvLyAgIH0sIDMwMCk7XHJcbiAgLy8gfVxyXG5cclxuICBmdW5jdGlvbiB0ZWFtUm93SGVpZ2h0KCkge1xyXG4gICAgaWYod2luZG93V2lkdGggPiA5OTEpIHtcclxuICAgICAgJCgnLnRlYW0nKS5oZWlnaHQoJCgnLnRlYW1fX2Nhcm91c2VsX2RldGFpbCcpLmhlaWdodCgpICsgMTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJCgnLnRlYW0nKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcHV0TG9nb0l0ZW1Ub05hdigpO1xyXG4gIHRlYW1Sb3dIZWlnaHQoKTtcclxuXHJcbiAgJCgnLmJ0bl9idXJnZXInKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdjbGlja2VkJyk7XHJcbiAgICAkKCcuaGVhZGVyX19tYWluLW5hdiwgLmhlYWRlcl9fbGFuZ3VhZ2VzLCAubW9iLXJlZ2lzdGVyLWJ0bicpLnRvZ2dsZUNsYXNzKCd1bmNvbGxhcHNlZCcpO1xyXG4gIH0pO1xyXG5cclxuICAkKCcjZG9jdG9ycy1maWx0ZXInKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdmFsID0gJCh0aGlzKS52YWwoKTtcclxuICAgIGNvbnNvbGUubG9nKHZhbCk7XHJcbiAgICAkKCcudGVhbV9fY2Fyb3VzZWxfcGhvdG8nKS5zbGljaygnc2xpY2tGaWx0ZXInLCAnLnRlYW1fX2Nhcm91c2VsX3Bob3RvX19zbGlkZScpOyAgICBcclxuICAgICQoJy50ZWFtX19jYXJvdXNlbF9waG90bycpLnNsaWNrKCdzbGlja0ZpbHRlcicsICcudGVhbV9fY2Fyb3VzZWxfcGhvdG9fX3NsaWRlW2RhdGEtY2F0PVwiJyt2YWwrJ1wiXScpO1xyXG4gIH0pO1xyXG5cclxuICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgIGNsZWFyVGltZW91dChyZXNpemVEb25lVGltZXIpO1xyXG4gICAgcmVzaXplRG9uZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgLy8gUmVzaXplIGNhbGxiYWNrIGNvZGVcclxuICAgICAgd2luZG93V2lkdGggPSAkKHdpbmRvdykuaW5uZXJXaWR0aCgpO1xyXG4gICAgICBcclxuICAgICAgaWYod2luZG93V2lkdGggPiA5OTEpIHtcclxuICAgICAgICAkKCcuaGVhZGVyX19tYWluLW5hdiwgLmhlYWRlcl9fbGFuZ3VhZ2VzLCAubW9iLXJlZ2lzdGVyLWJ0bicpLnJlbW92ZUNsYXNzKCd1bmNvbGxhcHNlZCcpO1xyXG4gICAgICAgICQoJy5idG5fYnVyZ2VyJykucmVtb3ZlQ2xhc3MoJ2NsaWNrZWQnKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdGVhbVJvd0hlaWdodCgpO1xyXG4gICAgfSwgMjUwKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBpdGVyaWFXYXRlcm1hcmsoKSB7XHJcbiAgY29uc29sZS5sb2coXCIgICAgICAgICAgICBoTU1NTU1NTXkgICAgICAgOk1NTU1NTU1NYCAgICAgICAgICAgIFwiKTtcclxuICBjb25zb2xlLmxvZyhcIiAgICAgICAgICAgIGhNTSAgICAgICAgICAgICAgICAgICB5TU1gICAgICAgICAgICAgXCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiICAgICAgICAgICAgaE1NICAgICAgL29vb29vb2AgICAgIHlNTWAgICAgICAgICAgICBcIik7XHJcbiAgY29uc29sZS5sb2coXCIgICAgICAgICAgICBoTU0gICAgICBzZGRkZGRkYCAgICAgeU1NYCAgICAgICAgICAgIFwiKTtcclxuICBjb25zb2xlLmxvZyhcIiAgICAgICAgICAgIGhNTSAgICAgIHNkZGRkZGRgICAgICB5TU1gICAgICAgICAgICAgXCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiICAgICAgICAgICAgaE1NICAgICAgL29vb29vb2AgICAgIHlNTWAgICAgICAgICAgICBcIik7XHJcbiAgY29uc29sZS5sb2coXCIgICAgICAgICAgICBoTU0gICAgICAgICAgICAgICAgICAgeU1NYCAgICAgICAgICAgIFwiKTtcclxuICBjb25zb2xlLmxvZyhcIiAgICAgICAgICAgIGhNTU1NTU1NeSAgICAgICA6TU1NTU1NTU1gICAgICAgICAgICAgXCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XHJcbiAgY29uc29sZS5sb2coXCIuYCAuOjo6Ojo6OjpgIC1vb29vb28uICBvb28rKzogICAgOi4gICAgICAvLiAgICAgIFwiKTtcclxuICBjb25zb2xlLmxvZyhcIi8tICAgICA6LSAgICAgLysgICAgICAgIG0gICBgL21gICBzOiAgICAgL2hkYCAgICAgXCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiLy0gICAgIDotICAgICAvKyAgICAgICAgbSAgICBgbS0gIHM6ICAgIC1kYDpoICAgICBcIik7IFxyXG4gIGNvbnNvbGUubG9nKFwiLy0gICAgIDotICAgICAvaG9vb28rICAgTisrK3lvLSAgIHM6ICAgYG06YGB5cyAgICBcIik7XHJcbiAgY29uc29sZS5sb2coXCIvLSAgICAgOi0gICAgIC8rICAgICAgICBtICAgb3lgICAgczogICBkbysrKytoLyAgIFwiKTtcclxuICBjb25zb2xlLmxvZyhcIi8tICAgICA6LSAgICAgL28gICAgICAgIG0gICAgOmQuICBzOiAgeW8gICAgIGBtLSAgXCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiLmAgICAgIGBgICAgICAuLy8vLy8vXFxgICA6ICAgICAuOiAgLWAgYC8gICAgICAgLjogXCIpO1xyXG59XHJcblxyXG4vLyBpdGVyaWFXYXRlcm1hcmsoKTtcclxuXHJcbi8vIEluaXQgQU9TXHJcbkFPUy5pbml0KCk7Il19
